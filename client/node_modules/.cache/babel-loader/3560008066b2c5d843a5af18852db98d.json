{"ast":null,"code":"import _toConsumableArray from\"D:/MERN/Contact-Management-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:/MERN/Contact-Management-system/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_CONTACTS,ADD_CONTACT,DELETE_CONTACT,SET_CURRENT,CLEAR_CURRENT,UPDATE_CONTACT,FILTER_CONTACTS,CLEAR_CONTACTS,CLEAR_FILTER,CONTACT_ERROR}from\"../types\";export var contactReducer=function contactReducer(state,action){switch(action.type){case GET_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:action.payload,loading:false});case ADD_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:[action.payload].concat(_toConsumableArray(state.contacts))});case UPDATE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.map(function(contact){return contact._id===action.payload._id?action.payload:contact;})});case DELETE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.filter(function(contact){return contact._id!==action.payload;})});case SET_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:action.payload});case CLEAR_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:null});case FILTER_CONTACTS:return _objectSpread(_objectSpread({},state),{},{filtered:state.contacts.filter(function(contact){var regex=new RegExp(\"\".concat(action.payload),'gi');return contact.name.match(regex)||contact.email.match(regex);})});case CLEAR_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:null,filtered:null,error:null,current:null});case CLEAR_FILTER:return _objectSpread(_objectSpread({},state),{},{filtered:null});case CONTACT_ERROR:return _objectSpread(_objectSpread({},state),{},{error:action.payload});default:return state;}};","map":{"version":3,"sources":["D:/MERN/Contact-Management-system/client/src/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","contactReducer","state","action","type","contacts","payload","loading","map","contact","_id","filter","current","filtered","regex","RegExp","name","match","email","error"],"mappings":"qUAAA,OACEA,YADF,CAEEC,WAFF,CAGEC,cAHF,CAIEC,WAJF,CAKEC,aALF,CAMEC,cANF,CAOEC,eAPF,CAQEC,cARF,CASEC,YATF,CAUEC,aAVF,KAWO,UAXP,CAaA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,KAAD,CAAQC,MAAR,CAAmB,CAC/C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKb,CAAAA,YAAL,CACE,sCACKW,KADL,MAEEG,QAAQ,CAAEF,MAAM,CAACG,OAFnB,CAGEC,OAAO,CAAE,KAHX,GAKF,IAAKf,CAAAA,WAAL,CACE,sCACKU,KADL,MAEEG,QAAQ,EAAGF,MAAM,CAACG,OAAV,4BAAsBJ,KAAK,CAACG,QAA5B,EAFV,GAIF,IAAKT,CAAAA,cAAL,CACE,sCACKM,KADL,MAEEG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmB,SAACC,OAAD,QAC3BA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,CAAqCP,MAAM,CAACG,OAA5C,CAAsDG,OAD3B,EAAnB,CAFZ,GAMF,IAAKhB,CAAAA,cAAL,CACE,sCACKS,KADL,MAEEG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeM,MAAf,CACR,SAACF,OAAD,QAAaA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAApC,EADQ,CAFZ,GAMF,IAAKZ,CAAAA,WAAL,CACE,sCACKQ,KADL,MAEEU,OAAO,CAAET,MAAM,CAACG,OAFlB,GAIF,IAAKX,CAAAA,aAAL,CACE,sCACKO,KADL,MAEEU,OAAO,CAAE,IAFX,GAIF,IAAKf,CAAAA,eAAL,CACE,sCACKK,KADL,MAEEW,QAAQ,CAAEX,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsB,SAAAF,OAAO,CAAI,CACzC,GAAMK,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcZ,MAAM,CAACG,OAArB,EAAgC,IAAhC,CAAd,CACA,MAAOG,CAAAA,OAAO,CAACO,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,GAA6BL,OAAO,CAACS,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC,CACD,CAHS,CAFZ,GAOF,IAAKhB,CAAAA,cAAL,CACE,sCACKI,KADL,MAEEG,QAAQ,CAAE,IAFZ,CAGEQ,QAAQ,CAAE,IAHZ,CAIEM,KAAK,CAAE,IAJT,CAKEP,OAAO,CAAE,IALX,GAOA,IAAKb,CAAAA,YAAL,CACE,sCACKG,KADL,MAEEW,QAAQ,CAAE,IAFZ,GAIJ,IAAKb,CAAAA,aAAL,CACE,sCACKE,KADL,MAEEiB,KAAK,CAAEhB,MAAM,CAACG,OAFhB,GAIF,QACE,MAAOJ,CAAAA,KAAP,CA/DJ,CAiED,CAlEM","sourcesContent":["import {\r\n  GET_CONTACTS,\r\n  ADD_CONTACT,\r\n  DELETE_CONTACT,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  UPDATE_CONTACT,\r\n  FILTER_CONTACTS,\r\n  CLEAR_CONTACTS,\r\n  CLEAR_FILTER,\r\n  CONTACT_ERROR\r\n} from \"../types\";\r\n\r\nexport const contactReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case GET_CONTACTS:\r\n      return {\r\n        ...state,\r\n        contacts: action.payload,\r\n        loading: false\r\n      };\r\n    case ADD_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts],\r\n      };\r\n    case UPDATE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map((contact) =>\r\n          contact._id === action.payload._id ? action.payload : contact\r\n        ),\r\n      };\r\n    case DELETE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          (contact) => contact._id !== action.payload\r\n        ),\r\n      };\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: action.payload,\r\n      };\r\n    case CLEAR_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: null,\r\n      };\r\n    case FILTER_CONTACTS:\r\n      return {\r\n        ...state,\r\n        filtered: state.contacts.filter(contact => {\r\n          const regex = new RegExp(`${action.payload}`, 'gi');\r\n          return contact.name.match(regex) || contact.email.match(regex)\r\n        }),\r\n      };\r\n    case CLEAR_CONTACTS:\r\n      return {\r\n        ...state,\r\n        contacts: null,\r\n        filtered: null,\r\n        error: null,\r\n        current: null\r\n      }\r\n      case CLEAR_FILTER:\r\n        return {\r\n          ...state,\r\n          filtered: null,\r\n      };\r\n    case CONTACT_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}